{"version":3,"sources":["assests/audio/answer.mp3","components/Home.js","components/quiz/QuizInstructions.js","utils/isEmpty.js","components/quiz/Play.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Helmet","id","className","to","QuizInstructions","style","color","textAlign","fontsize","isEmpty","value","Object","keys","length","trim","Play","props","startTimer","countDownTime","Date","now","interval","setInterval","distance","min","Math","floor","sec","clearInterval","setState","time","alert","history","push","hanndleClick","e","console","log","target","innerHTML","state","answer","document","getElementById","play","currenctOption","wrongOption","M","toast","html","displayLength","classes","prev","score","noOfAnsweredQuestion","correctAnswers","currentQuestionIndex","displayFunction","questions","currentQuestion","nextQuestion","preQuestion","wrongAnswers","handlePreButton","undefined","pre","handleNextButton","handleQuitButton","window","confirm","IsEmpty","noOfQuestion","counter","questionss","hints","fiftyfifty","usedFifty","nextButtonDisable","prvButtonDisable","this","src","Sound","question","onClick","optionB","optionA","optionC","optionD","Component","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ojDAAAA,EAAOC,QAAU,IAA0B,oC,wMCwC5BC,EApCD,kBACb,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,SAAS,kDACT,yBAAKC,GAAG,QACJ,iCAEC,6BACA,0BAAMC,UAAU,oEAEhB,yCACA,yBAAKA,UAAU,yBACd,4BACI,gCAAK,kBAAC,IAAD,CAAMA,UAAU,cAAcC,GAAI,sBAAlC,aAGV,yBAAKD,UAAU,mBAER,yBAAKA,UAAU,kBAAkBD,GAAG,gBAChC,4BACI,gCAAK,kBAAC,IAAD,CAAMC,UAAU,YAAYC,GAAG,KAA/B,cAIb,yBAAKD,UAAU,mBAAmBD,GAAG,iBAE/B,4BACA,kBAAC,IAAD,CAAMC,UAAU,YAAYC,GAAG,KAA/B,oBCARC,MAzBf,WACI,OACI,kBAAC,WAAD,KACI,kBAACJ,EAAA,EAAD,KAAQ,sDACV,yBAAKE,UAAU,aACX,yBAAKA,UAAU,2BACb,wBAAIG,MAAO,CAACC,MAAO,QAASC,UAAU,WAAtC,yBAA2E,wBAAIL,UAAW,CAAEI,MAAM,QAASE,SAAS,UACvH,whCAQD,yBAAKN,UAAU,OACP,0BAAMA,UAAU,aAAhB,IAA6B,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAI,KAA3B,uBAC7B,0BAAMD,UAAU,cAAhB,IAA8B,kBAAC,IAAD,CAAOA,UAAW,WAAUC,GAAI,SAAhC,0B,0ECbnCM,EATC,SAACC,GAAD,MACN,cAAVA,GACS,MAATA,GACkB,kBAAVA,GAAoD,IAA9BC,OAAOC,KAAKF,GAAOG,QAC/B,kBAAVH,GAA6C,IAAvBA,EAAMI,OAAOD,QC8O5BE,E,kDAzOX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgCVC,WAAa,WACL,IAAMC,EAAgBC,KAAKC,MAAO,IAClC,EAAKC,SAASC,aAAY,WAC1B,IAAMF,EAAM,IAAID,KACVI,EAAWL,EAAgBE,EAE3BI,EAAMC,KAAKC,MAAOH,EAAQ,KAAT,KACjBI,EAAOF,KAAKC,MAAOH,EAAQ,IAAgB,KAE9CA,EAAW,GACVK,cAAc,EAAKP,UAClB,EAAKQ,SAAS,CACXC,KAAK,CACEN,IAAI,EACJG,IAAI,KAEZ,WACAI,MAAM,iBACN,EAAKf,MAAMgB,QAAQC,KAAK,SAG5B,EAAKJ,SAAS,CACVC,KAAM,CACFN,MACAG,WAIR,MA7DQ,EAoEnBO,aAAe,SAACC,GACdC,QAAQC,IAAI,iBAAkBF,EAAEG,OAAOC,WACpCJ,EAAEG,OAAOC,YAAc,EAAKC,MAAMC,QACnCC,SAASC,eAAe,WAAWC,OACnC,EAAKC,mBAGDH,SAASC,eAAe,WAAWC,OACnC,EAAKE,gBA5EM,EAkFnBD,eAAiB,WACbE,IAAEC,MAAM,CACPC,KAAK,mBACLC,cAAc,KACdC,QAAQ,gBAGX,EAAKtB,UAAU,SAAAuB,GAAI,MAAK,CACpBC,MAAOD,EAAKC,MAAO,EACnBC,qBAAsBF,EAAKE,qBAAuB,EAClDC,eAAiBH,EAAKG,eAAiB,EACvCC,qBAAsBJ,EAAKI,qBAAuB,MAEjD,WACD,EAAKC,gBAAgB,EAAKjB,MAAMkB,UAAU,EAAKlB,MAAMmB,gBAAgB,EAAKnB,MAAMoB,aAAa,EAAKpB,MAAMqB,iBAhG3F,EAqGnBf,YAAc,WACVC,IAAEC,MAAM,CACPC,KAAK,gBACLC,cAAc,KACdC,QAAQ,kBAGV,EAAKtB,UAAU,SAAAuB,GAAI,MAAK,CACrBC,MAAOD,EAAKC,MAAO,EACnBC,qBAAsBF,EAAKE,qBAAuB,EAClDQ,aAAeV,EAAKU,aAAe,EACnCN,qBAAsBJ,EAAKI,qBAAuB,MAEjD,WACD,EAAKC,gBAAgB,EAAKjB,MAAMkB,UAAU,EAAKlB,MAAMmB,gBAAgB,EAAKnB,MAAMoB,aAAa,EAAKpB,MAAMqB,iBAnH3F,EA2HpBE,gBAAkB,WAChB3B,QAAQC,IAAI,mBACkB2B,IAA3B,EAAKxB,MAAMqB,YACV,EAAKhC,UAAU,SAAAoC,GAAG,MAAK,CACnBT,qBAAuBS,EAAIT,qBAAsB,MACjD,WACH,EAAKC,gBAAgB,EAAKjB,MAAMkB,UAAU,EAAKlB,MAAMmB,gBAAgB,EAAKnB,MAAMoB,aAAa,EAAKpB,MAAMqB,gBAGzGd,IAAEC,MAAM,CACRC,KAAK,oBACLC,cAAc,KACdC,QAAQ,mBAvIM,EA6InBe,iBAAmB,gBACaF,IAA5B,EAAKxB,MAAMoB,aACV,EAAK/B,UAAU,SAAAoC,GAAG,MAAK,CACnBT,qBAAuBS,EAAIT,qBAAsB,MACjD,WACH,EAAKC,gBAAgB,EAAKjB,MAAMkB,UAAU,EAAKlB,MAAMmB,gBAAgB,EAAKnB,MAAMoB,aAAa,EAAKpB,MAAMqB,gBAGzGd,IAAEC,MAAM,CACRC,KAAK,oBACLC,cAAc,KACdC,QAAQ,mBAxJM,EA8JpBgB,iBAAmB,WACbC,OAAOC,QAAQ,gCAEd,EAAKrD,MAAMgB,QAAQC,KAAK,MAjKX,EAqKnBwB,gBAAkB,WAA8E,IAA7EC,EAA4E,uDAAjE,EAAKlB,MAAMkB,UAAWC,EAA2C,uCAA3BC,EAA2B,uCAAdC,EAAc,uCACvFL,EAAuB,EAAKhB,MAA5BgB,qBAGJ,GAFApB,QAAQC,IAAI,mCAEPiC,EAAQZ,GAeTU,OAAOrC,MAAM,gCAfO,CAEpB4B,GADAD,EAAW,EAAKlB,MAAMkB,WACKF,GAC3BI,EAAcF,EAAUF,EAAuB,GAC/CK,EAAcH,EAAUF,EAAsB,GAC9C,IAAMf,EAASkB,EAAgBlB,OAC/B,EAAKZ,SAAS,CACV8B,gBAAiBA,EACjBC,aAAcA,EACdC,YAAaA,EACbU,aAAcb,EAAU7C,OACxB4B,OAAOA,MAlLf,EAAKD,MAAQ,CACTgC,QAAS,EACTd,UAAUe,EACVd,gBAAgB,GAChBC,aAAa,GACZC,YAAY,GACbpB,OAAO,WACP8B,aAAa,EACbjB,qBAAqB,EACrBE,qBAAqB,EACrBH,MAAM,EACNE,eAAe,EACfO,aAAa,EACbY,MAAM,EACNC,WAAW,EACXC,WAAU,EACVC,mBAAkB,EAClBC,kBAAiB,EACjBhD,KAAK,IAET,EAAKT,SAAU,KAtBA,E,gEA2Bfe,QAAQC,IAAI,8BADE,MAE8C0C,KAAKvC,MAA5DkB,EAFS,EAETA,UAAWC,EAFF,EAEEA,gBAAiBC,EAFnB,EAEmBA,aAAcC,EAFjC,EAEiCA,YAC/CkB,KAAKtB,gBAAgBC,EAAUC,EAAiBC,EAAcC,GAC9DkB,KAAK9D,e,+BA6JC,IAAD,OACPmB,QAAQC,IAAIoC,GACZrC,QAAQC,IAAI0C,KAAKvC,MAAMkB,WAFhB,MAG0DqB,KAAKvC,MAA/DmB,EAHA,EAGAA,gBAAgBY,EAHhB,EAGgBA,aAAaf,EAH7B,EAG6BA,qBAAqB1B,EAHlD,EAGkDA,KAEvD,OADAM,QAAQC,IAAI,qBAAqBsB,GAE7B,kBAAC,WAAD,KACI,kBAAC3D,EAAA,EAAD,SAAS,kDACT,kBAAC,WAAD,KACC,2BAAQC,GAAI,UAAU+E,IAAKC,KAA3B,MAID,yBAAK/E,UAAU,aACX,yBAAKA,UAAU,sBACX,+BAAI,0BAAMA,UAAU,8CAApB,IAAwE,0BAAMA,UAAU,YAAhB,MACxE,+BAAI,0BAAMA,UAAU,2CAApB,IAAqE,6BAAS,0BAAMA,UAAU,UAAU4B,EAAKN,IAA/B,KAAsCM,EAAKH,IAA3C,OAGlF,6BACI,2BACE,+CADF,KAC+B,8BAAQ6B,EAAuB,EAA/B,IAAmCe,KAK1E,4BAAKZ,EAAgBuB,UACrB,yBAAKhF,UAAU,oBACX,uBAAGiF,QAAW,SAAChD,GAAD,OAAM,EAAKD,aAAaC,IAAIjC,UAAU,UAAUyD,EAAgByB,SAC9E,uBAAGD,QAAW,SAAChD,GAAD,OAAM,EAAKD,aAAaC,IAAGjC,UAAU,UAAUyD,EAAgB0B,UAEjF,yBAAKnF,UAAU,oBACX,uBAAGiF,QAAW,SAAChD,GAAD,OAAM,EAAKD,aAAaC,IAAGjC,UAAU,UAAUyD,EAAgB2B,SAC7E,uBAAGH,QAAW,SAAChD,GAAD,OAAM,EAAKD,aAAaC,IAAGjC,UAAU,UAAUyD,EAAgB4B,UAEjF,yBAAKrF,UAAU,oBACX,4BAAQD,GAAI,YAAYkF,QAAUJ,KAAKhB,iBAAvC,QACA,4BAAQ9D,GAAI,aAAYkF,QAAUJ,KAAKb,kBAAvC,QACA,4BAAQjE,GAAI,aAAYkF,QAAUJ,KAAKZ,kBAAvC,e,GAlODqB,a,OCSJC,MAXf,WACE,OACE,kBAAC,IAAD,KAEG,kBAAC,IAAD,CAAQC,KAAK,IAAIC,OAAK,EAAEC,UAAW7F,IACnC,kBAAC,IAAD,CAAQ2F,KAAM,qBAAqBC,OAAK,EAACC,UAAWxF,IACpD,kBAAC,IAAD,CAAOsF,KAAK,QAAQC,OAAK,EAACC,UAAW7E,MCAxB8E,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAEL,kBAAC,EAAD,MAEFxD,SAASC,eAAe,SDqHpB,kBAAmBwD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.2981a773.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/answer.02882ce2.mp3\";","import React ,{Fragment}from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\n const Home = () => (\r\n <Fragment>\r\n     <Helmet> <title>Quiz App- Home</title></Helmet>\r\n     <div id=\"home\">\r\n         <section>\r\n         {/* <h4>Home component</h4> */}\r\n          <div>\r\n          <span className=\"mdi mdi-timer-sand-full  text-align: center; mdi-spin quizicon\"></span>\r\n          </div>\r\n          <h1> Quiz App</h1>\r\n          <div className=\"play-button-container\">\r\n           <ul>\r\n               <li> <Link className=\"paly-button\" to =\"/play/instructions\"> Play </Link></li>\r\n           </ul>\r\n          </div>\r\n          <div className=\"auth-containers\">\r\n             \r\n                 <div className=\"row auth-button\" id=\"login-button\">\r\n                     <ul>\r\n                         <li> <Link className=\"signupbtn\" to=\"#\"> Log In</Link></li>\r\n                     </ul>\r\n                     \r\n                 </div>\r\n                 <div className=\" row auth-button\" id=\"signup-button\">\r\n                       \r\n                       <ul>\r\n                       <Link className=\"signupbtn\" to=\"#\"> Register</Link>\r\n                     </ul>\r\n                 </div>\r\n              </div>\r\n           \r\n         </section>\r\n     </div>\r\n </Fragment>\r\n )\r\n\r\nexport default Home;","import React,{Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Link} from 'react-router-dom';\r\n \r\n\r\nfunction QuizInstructions() {\r\n    return (\r\n        <Fragment>\r\n            <Helmet><title>Quiz- Instructions</title></Helmet>\r\n          <div className=\"container\"> \r\n              <div className=\" container instructions\">\r\n                <h4 style={{color :\"balck\" ,textAlign:\"center\"}}>Read the instrustion </h4><hr className={{ color:\"black\" ,fontsize:\"10px\"}}/>\r\n             <p>\r\n             This test consists of two sections: (1) a multiple-choice question section and (2) a constructed-response assignment section.  Each question in the first section is a multiple-choice question with four answer choices.  Read each question and answer choice carefully and choose the ONE best answer.  \r\n                Try to answer all questions.  In general, if you have some knowledge about a question, it is better to try to answer it.  You will not be penalized for guessing.  \r\n                The second section contains one constructed-response assignment.  Directions for the constructed-response assignment section appear immediately before the assignment.  \r\n                You may work on the multiple-choice questions and the constructed-response assignment in any order that you choose.  Be sure to allocate your time carefully so you are able to complete the entire test within the testing session.  You may go back and review your answers at any time during the testing session.  \r\n                You may NOT use a calculator or reference materials during the testing session.   \r\n             </p>      \r\n            </div>\r\n            <div className=\"row\">\r\n                    <span className=\"left link\"> <Link className=\"link\" to =\"/\"> No , Take Me Back</Link></span>\r\n                    <span className=\"right link\"> <Link  className =\"link-Yes\"to =\"/play\"> Yes , Start Test</Link></span>\r\n            </div>\r\n        </div> \r\n        </Fragment>\r\n      \r\n    )\r\n}\r\n\r\nexport default QuizInstructions;\r\n","const isEmpty = (value) =>\r\nvalue === \"undefined\"   ||\r\nvalue == null ||\r\n(typeof value === 'object' && Object.keys(value).length === 0) ||\r\n(typeof value === \"string\" && value.trim().length ===0) \r\n\r\n\r\n\r\n\r\nexport default isEmpty;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport questionss from \"../questionpaper/questions.json\";\r\nimport M from 'materialize-css';\r\nimport Sound from '../../assests/audio/answer.mp3';\r\nimport IsEmpty from '../../utils/isEmpty';\r\n\r\n \r\nclass Play extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: 0,\r\n            questions:questionss,\r\n            currentQuestion:{},\r\n            nextQuestion:{},\r\n             preQuestion:{},\r\n            answer:'noAnswer',\r\n            noOfQuestion:0,\r\n            noOfAnsweredQuestion:0,\r\n            currentQuestionIndex:0,\r\n            score:0,\r\n            correctAnswers:0,\r\n            wrongAnswers:0,\r\n            hints:5,\r\n            fiftyfifty:2,\r\n            usedFifty:false,\r\n            nextButtonDisable:false,\r\n            prvButtonDisable:true,\r\n            time:{ }\r\n        }\r\n        this.interval =null\r\n\r\n    }\r\n\r\n   componentDidMount(){\r\n        console.log(\"inside Component did mount\");\r\n        let {questions, currentQuestion, nextQuestion, preQuestion}=this.state;\r\n        this.displayFunction(questions,currentQuestion, nextQuestion, preQuestion );\r\n        this.startTimer();\r\n    }\r\n\r\n    startTimer = ()=>{\r\n            const countDownTime = Date.now() +30000;\r\n            this.interval=setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countDownTime - now;\r\n\r\n            const min = Math.floor((distance %(1000 *60 *60))/(1000 *60 ));  \r\n            const sec  = Math.floor((distance %(1000 *60 ))/(1000 ));  \r\n\r\n            if(distance < 0){\r\n                clearInterval(this.interval);\r\n                 this.setState({\r\n                    time:{\r\n                           min:0,\r\n                           sec:0\r\n                    }\r\n                }, () => {\r\n                   alert(\"Time Out !!!!\");\r\n                   this.props.history.push('/');\r\n               });\r\n           }else{\r\n               this.setState({\r\n                   time: {\r\n                       min ,\r\n                       sec\r\n                   }\r\n               });\r\n           }\r\n            }, 1000);\r\n\r\n       \r\n\r\n    }\r\n    \r\n\r\n    hanndleClick = (e) =>{\r\n      console.log(\"option clicked\" ,e.target.innerHTML);\r\n      if(e.target.innerHTML === this.state.answer){\r\n        document.getElementById(\"correct\").play();\r\n        this.currenctOption();\r\n      }\r\n      else{\r\n            document.getElementById(\"correct\").play();\r\n            this.wrongOption();\r\n      }\r\n     \r\n      \r\n    }\r\n     \r\n    currenctOption = ()=>{\r\n        M.toast({\r\n         html:\"Correct Answer !\",\r\n         displayLength:1500,\r\n         classes:\"toast-valid\"\r\n        });\r\n  \r\n      this.setState( prev => ({\r\n          score: prev.score +1,\r\n          noOfAnsweredQuestion :prev.noOfAnsweredQuestion + 1 ,\r\n          correctAnswers : prev.correctAnswers + 1,\r\n          currentQuestionIndex :prev.currentQuestionIndex + 1\r\n          \r\n      }),  () =>{\r\n          this.displayFunction(this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.state.preQuestion);\r\n      });\r\n\r\n    } \r\n\r\n    wrongOption = ()=>{\r\n        M.toast({\r\n         html:\"Wrong Answer!\",\r\n         displayLength:1500,\r\n         classes:\"toast-invalid\"\r\n        });\r\n  \r\n       this.setState( prev => ({\r\n          score: prev.score +1,\r\n          noOfAnsweredQuestion :prev.noOfAnsweredQuestion + 1 ,\r\n          wrongAnswers : prev.wrongAnswers + 1,\r\n          currentQuestionIndex :prev.currentQuestionIndex + 1\r\n          \r\n      }),  () =>{\r\n          this.displayFunction(this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.state.preQuestion);\r\n      });\r\n\r\n\r\n    }  \r\n\r\n   //navigation buttons\r\n   \r\n   handlePreButton = ()=>{\r\n     console.log(\"Pre Button\")\r\n     if(this.state.preQuestion !== undefined ){\r\n         this.setState( pre => ({\r\n             currentQuestionIndex : pre.currentQuestionIndex -1\r\n         }), () =>{\r\n          this.displayFunction(this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.state.preQuestion);\r\n      });\r\n     }else{\r\n         M.toast({\r\n         html:\"No more quesions!\",\r\n         displayLength:1500,\r\n         classes:\"toast-invalid\"\r\n        });\r\n     }\r\n       \r\n   }\r\n\r\n    handleNextButton = ()=>{\r\n     if(this.state.nextQuestion !== undefined ){\r\n         this.setState( pre => ({\r\n             currentQuestionIndex : pre.currentQuestionIndex +1\r\n         }), () =>{\r\n          this.displayFunction(this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.state.preQuestion);\r\n      });\r\n     }else{\r\n         M.toast({\r\n         html:\"No more quesions!\",\r\n         displayLength:1500,\r\n         classes:\"toast-invalid\"\r\n        });\r\n     }\r\n       \r\n   }\r\n\r\n   handleQuitButton = ()=>{\r\n      if(window.confirm('Are you sure want to Quit ?'))\r\n      {\r\n          this.props.history.push('/');\r\n      }\r\n   }\r\n\r\n    displayFunction = (questions =this.state.questions ,currentQuestion,nextQuestion,preQuestion)=>{\r\n        let{currentQuestionIndex }=this.state;\r\n        console.log(\"inside displayFunction function\");\r\n       \r\n        if( !IsEmpty(questions)){\r\n            questions= this.state.questions;\r\n            currentQuestion =questions[currentQuestionIndex];\r\n            nextQuestion= questions[currentQuestionIndex + 1];\r\n            preQuestion = questions[currentQuestionIndex -1];\r\n            const answer = currentQuestion.answer;     \r\n            this.setState({\r\n                currentQuestion: currentQuestion,\r\n                nextQuestion: nextQuestion,\r\n                preQuestion: preQuestion,\r\n                noOfQuestion: questions.length,\r\n                answer:answer\r\n            });\r\n        \r\n        }else{\r\n            window.alert(\"Question Set is Empty !!\");\r\n        }\r\n    };\r\n    render() {\r\n      console.log(questionss);\r\n      console.log(this.state.questions);\r\n        let {currentQuestion,noOfQuestion,currentQuestionIndex,time} = this.state;\r\n        console.log(\"currentQuestion ->\",currentQuestion);\r\n        return (\r\n            <Fragment>\r\n                <Helmet> <title>Quiz App- Test</title></Helmet>\r\n                <Fragment>\r\n                 <audio  id =\"correct\" src={Sound}> </audio>\r\n                </Fragment>\r\n                {/* <div>Counte : {this.state.counter}</div>\r\n                 <button onClick ={ () => this.increaseCount()}> Click Me </button> */}\r\n                <div className=\"quetions \">\r\n                    <div className=\"lifeline-container\">\r\n                        <p> <span className=\"mdi mdi-set-center mdi-24px lifeline-icon\"></span> <span className=\"lifeline\">2</span></p>\r\n                        <p> <span className=\" mdi mdi-clock-outline mdi-32px clock1\"></span> <br></br><span className=\"clock1\">{time.min}: {time.sec} </span></p>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                          <label> Questions :</label>  <span>{ currentQuestionIndex + 1}/{noOfQuestion}</span>\r\n                            {/* <span className=\"mdi mdi-clock-outline md-24px\"> 111/115</span> */}\r\n                        </p>\r\n                    </div>\r\n                \r\n                <h4>{currentQuestion.question}</h4>\r\n                <div className=\"answer-container\">\r\n                    <p onClick = {(e)=> this.hanndleClick(e)} className=\"option\">{currentQuestion.optionB}</p>\r\n                    <p onClick = {(e)=> this.hanndleClick(e)}className=\"option\">{currentQuestion.optionA}</p>\r\n                </div>\r\n                <div className=\"answer-container\">\r\n                    <p onClick = {(e)=> this.hanndleClick(e)}className=\"option\">{currentQuestion.optionC}</p>\r\n                    <p onClick = {(e)=> this.hanndleClick(e)}className=\"option\">{currentQuestion.optionD}</p>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button id =\"preButton\" onClick ={this.handlePreButton}>Prev</button>\r\n                    <button id =\"nextButton\"onClick ={this.handleNextButton} >Next</button>\r\n                    <button id =\"quitButton\"onClick ={this.handleQuitButton}>Quit</button>\r\n                </div>\r\n            </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Play;\r\n","import React from 'react';\nimport Home from './components/Home';\nimport QuizInstructions from './components/quiz/QuizInstructions';\nimport Play from './components/quiz/Play';\nimport {BrowserRouter as Router , Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      {/* <span className=\"mdi mdi-face\"> hey</span> */}\n       <Route  path=\"/\" exact  component={Home}/>\n       <Route  path =\"/play/instructions\" exact component={QuizInstructions}/>\n       <Route path=\"/play\" exact component={Play}/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/@mdi/font/css/materialdesignicons.min.css';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css'\nimport '../node_modules/materialize-css/dist/js/materialize.min.js'\nimport './index.css';\nimport  './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}